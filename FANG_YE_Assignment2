//Given the array, implement a function for generating a new array which doubles the
//quantity and price in each object.
const itemsObject = [
  { quantity: 1, price: 200 },
  { quantity: 3, price: 350 },
  { quantity: 5, price: 400 },
];
function doubleVal(arr) {
  const newArray = arr.map((element) => {
    return {
      
      quantity: element.quantity * 2,
      price: element.price * 2,
    };
  });
  return newArray;
}

console.log(doubleVal(itemsObject));

//Given the array, implement a function for generating a new array which contains item
//quantity > 2 and price > 300 only
function filterArr(arr) {
  const result = arr.filter((arr) => arr.quantity > 2 && arr.price > 300);
  return result;
}
console.log(filterArr(itemsObject)); // [ { quantity: 3, price: 350 }, { quantity: 5, price: 400 } ]

//Given the array, implement a function to calculate the total value of the items
function sumprod(arr) {
  const sum = arr.reduce((accumulator, object) => {
    return accumulator + object.quantity * object.price;
  }, 0);
  return sum;
}
console.log(sumprod(itemsObject));

//Question 2
const string =
  "  Perhaps The Easiest-to-understand Case For Reduce Is To Return The Sum Of All The Elements In An Array ";

function removeNonal(str) {
  const replaced = str

    .replace(/[^a-zA-Z ]/g, " ") //remove non-alphabet characters
    .replace(/\s+/g, " ").trim() //remove extra spaces between words
    .toLowerCase();
    
  return replaced;
}
console.log(removeNonal(string));

//Question 3
const first = [
  { uuid: 2, name: "test" },
  { uuid: 5, name: "test5" },
  { uuid: 3, name: "test3" },
];
const second = [
  { uuid: 6, role: "pm" },
  { uuid: 4, role: "engineer" },
  { uuid: 1, role: "manager" },
  { uuid: 2, role: "associate" },
];

function mergeArrs(arr1, arr2) {
  //Merge two array of objects into a new array of objects
  const map = new Map();
  arr1.forEach((item) => map.set(item.uuid, item));
  arr2.forEach((item) =>
    map.set(item.uuid, { ...map.get(item.uuid), ...item })
  );
  const mergedArr = Array.from(map.values());

  const def = { uuid: null, name: null, role: null }; //create a object with default value null
  
  // Use object destructuring to replace all default values with the ones we have
  let result = mergedArr
    .map((item) => ({ ...def, ...item }))
    .sort(({ uuid: a }, { uuid: b }) => a - b);
  return result;
}
  //method2: fill with null for the merged array
 // mergedArr.forEach((ele) => {
 //   if (!ele.hasOwnProperty("name")) ele.name = null;
 //   else if (!ele.hasOwnProperty("role")) ele.role = null;
 // });
 // mergedArr.sort(({ uuid: a }, { uuid: b }) => a - b); //sort by uuid

 // return mergedArr;
//}
console.log(mergeArrs(first, second));

